[[{"l":"Welcome to pocketpy","p":["pocketpy is a portable Python 3.x interpreter, written in C11. It aims to be an alternative to Lua for game scripting, with elegant syntax, powerful features and competitive performance. pocketpy has no dependencies other than the C standard library, which can be easily integrated into your C/C++ project. Developers are able to write Python bindings via C-API or pybind11 compatible interfaces."]},{"l":"What it looks like"},{"l":"Supported platforms","p":["pkpy should work on any platform with a C11 compiler. These platforms are officially tested.","C99 compilers may also work currently according to users' feedback.","Windows 64-bit","Linux 64-bit / 32-bit","macOS 64-bit","Android 64-bit / 32-bit","iOS 64-bit","Emscripten 32-bit","Raspberry Pi OS 64-bit"]},{"l":"Star the repo","p":["If you find pkpy useful, consider star this repository(●'◡'●)"]},{"l":"Sponsor this project","p":["You can sponsor this project via these ways.","Github Sponsors","Buy me a coffee","Your sponsorship will help us develop pkpy continuously."]},{"i":"upgrade-to-v20","l":"Upgrade to v2.0","p":["pkpy v2.0 is a C11 project instead of C++ 17. All your existing code for v1.x won't work anymore.","We provide two API sets for v2.0, C-API and pybind11 API (C++17). If you are a C user, use the C-API. If you are a C++ user, use the pybind11 API."]}],[{"l":"Quick Start","p":["You have two options to integrate pkpy into your project."]},{"l":"Use the single header file","p":["Download the pocketpy.h and pocketpy.c on our GitHub Release page. And #include it in your project."]},{"l":"Use CMake","p":["Clone the whole repository as a submodule into your project, In your CMakelists.txt, add the following lines:","See CMakeLists.txt for details.","It is safe to use main branch in production if CI badge is green."]},{"l":"Compile flags","p":["To compile it with your project, these flags must be set:","--std=c11 flag must be set","For MSVC, /utf-8 flag must be set","NDEBUG macro should be defined for release build, or you will get poor performance"]},{"l":"Get prebuilt binaries","p":["We have prebuilt binaries, check them out on our GitHub Actions.","You can download an artifact there which contains the following files."]},{"l":"Example"}],[{"l":"Write C Bindings","p":["In order to use a C/C++ library in python, you need to write bindings for it.","pkpy uses an universal signature to wrap a C function pointer as a python function or method, i.e py_CFunction.","argc is the number of arguments passed to the function.","argv is the pointer to the first argument.","If successful, the function should return true and set the return value in py_retval(). In case there is no return value, you should use py_newnone(py_retval()). If an error occurs, the function should raise an exception and return false."]},{"l":"Steps","p":["Say you have a function add that takes two integers and returns their sum.","Here is how you can write the binding for it:","Once you have the wrapper function, you can bind it to a python module via py_bindfunc.","Alternatively, you can use py_bind with a signature, which allows you to specify some default values.","See also:","py_bind","py_bindmethod","py_bindfunc","py_bindproperty","py_newmodule","py_newtype"]}],[{"i":"write-c-bindings","l":"Write C++ Bindings"},{"l":"Quick Start","p":["pkpy provides a pybind11 compatible layer which allows users to do convenient bindings.","To begin with, use py::scoped_interpreter guard{} to start the interpreter before using any Python objects. Or explicitly call py::interpreter::initialize() and py::interpreter::finalize()."]},{"l":"module"},{"l":"function"},{"l":"class"},{"l":"operators"},{"i":"pyobject","l":"py::object","p":["py::object is just simple wrapper around PyVar. It supports some convenient methods to interact with Python objects.","here are some common methods:","you can also create some builtin objects with their according wrappers:"]},{"l":"More Examples","p":["More examples please see the test folder in the GSoC repository. All tested features are supported."]},{"l":"Limits and Comparison","p":["This is a feature list of pybind11 for pocketpy. It lists all completed and pending features. It also lists the features that cannot be implemented in the current version of pocketpy."]},{"i":"function-1","l":"Function","p":["Function overloading","Return value policy","is_prepend","*args and **kwargs","Keep-alive","Call Guard","Default arguments","Keyword-Only arguments","Positional-Only arguments","Allow/Prohibiting None arguments"]},{"i":"class-1","l":"Class","p":["Creating bindings for a custom type","Binding lambda functions","Dynamic attributes","Inheritance and automatic downcasting","Enumerations and internal types","Instance and static fields","Binding static fields may never be implemented in pocketpy because it requires a metaclass, which is a heavy and infrequently used feature."]},{"l":"Exceptions","p":["Need further discussion."]},{"l":"Smart pointers","p":["std::shared_ptr","std::unique_ptr","Custom smart pointers"]},{"l":"Type conversions","p":["Python built-in types","STL Containers","Functional","Chrono"]},{"i":"python-c-interface","l":"Python C++ interface","p":["bool_","buffer","bytearray","bytes","capsule","dict","float_","function","int_","iterable","iterator","list","memoryview","Need further discussion.","none","object","set","slice","str","tuple","type"]},{"l":"Miscellaneous","p":["Global Interpreter Lock (GIL)","Binding sequence data types, iterators, the slicing protocol, etc.","Convenient operators binding"]},{"l":"Differences between CPython and pocketpy","p":["only add, sub and mul have corresponding right versions in pocketpy. So if you bind int() py::self, it will has no effect in pocketpy.","__new__ and __del__ are not supported in pocketpy.","in-place operators, such as +=, -=, *=, etc., are not supported in pocketpy.","thre return value of globals is immutable in pocketpy."]}],[{"l":"Basic Features","p":["(1, 2, 'a')","[1, 2, 'a']","[i for i in range(5)]","{'a': 1, 'b': 2}","@cache","a, *b = [1, 2, 3]","a, b = 1, 2","a[1:2], a[:2], a[1:]","class A(B):","Context Block","Decorator","def f(a:int, b:float=1)","def f(x,*args,y=1):","Dict","Dynamic Code","eval()/exec()","Example","Exception","F-String","f'value is {x}'","for/while/break/continue","Function","Generator","hasattr()/getattr()/setattr()","If Else","if..else..elif","Import","import/from..import","List","ListComp","Loop","Name","raise/try..catch..finally","Reflection","Slice","Star Unpacking","Subclass","Supported","The following table shows the basic features of pkpy with respect to cpython. The features marked with YES are supported, and the features marked with NO are not supported.","Tuple","Type Annotation","Unpacking","with expr as id:","YES","yield i"]},{"l":"Supported magic methods"},{"l":"Unary operators","p":["__repr__","__str__","__hash__","__len__","__iter__","__next__","__neg__"]},{"l":"Logical operators","p":["__eq__","__lt__","__le__","__gt__","__ge__","__contains__"]},{"l":"Binary operators","p":["__add__","__and__","__floordiv__","__invert__","__lshift__","__matmul__","__mod__","__mul__","__or__","__pow__","__radd__","__rmul__","__rshift__","__rsub__","__sub__","__truediv__","__xor__"]},{"l":"Indexer","p":["__getitem__","__setitem__","__delitem__"]},{"l":"Specials","p":["__new__","__init__","__call__","__divmod__","__enter__","__exit__","__name__","__all__"]}],[{"l":"Comparison with CPython","p":["cpython is the reference implementation of the Python programming language. It is written in C and is the most widely used implementation of Python."]},{"l":"The design goal","p":["pkpy aims to be an alternative to lua for game scripting, not cpython for general purpose programming.","For syntax and semantics, pkpy is designed to be as close to cpython as possible.","For ecosystem and others, pkpy is not compatible with cpython.","pkpy supports most of the syntax and semantics of python. For performance and simplicity, some features are not implemented, or behave differently. The easiest way to test a feature is to try it on your browser."]},{"l":"Unimplemented features","p":["Descriptor protocol __get__ and __set__. However, @property is implemented.","__slots__ in class definition.","else clause in try..except.","Inplace methods like __iadd__ and __imul__.","__del__ in class definition.","Multiple inheritance."]},{"l":"Different behaviors","p":["positional and keyword arguments are strictly evaluated.","int does not derive from bool.","int is 64-bit.","Raw string cannot have boundary quotes in it, even escaped. See #55.","In a starred unpacked assignment, e.g. a, b, *c = x, the starred variable can only be presented in the last position. a, *b, c = x is not supported.","A Tab is equivalent to 4 spaces. You can mix Tab and spaces in indentation, but it is not recommended.","A return, break, continue in try/except/with block will make the finally block not executed."]}],[{"l":"Debugging","p":["This feature is not available in v2.0 yet.","You can invoke breakpoint() in your python code to start a PDB-like session.","The following commands are supported:","h, help: show this help message","q, quit: exit the debugger","n, next: execute next line","s, step: step into","w, where: show current stack frame","c, continue: continue execution","a, args: show local variables","l, list: show lines around current line","ll, longlist: show all lines","p, print expr: evaluate expression","!, execute statement: execute statement"]}],[{"l":"Undefined Behaviour","p":["These are the undefined behaviours of pkpy. The behaviour of pkpy is undefined if you do the following things.","Delete a builtin object. For example, del int.__add__.","Call an unbound method with the wrong type of self. For example, int.__add__('1', 2).","Type T's __new__ returns an object that is not an instance of T.","Call __new__ with a type that is not a subclass of type."]}],[{"l":"Introduction","p":["All public functions in the C API are prefixed with py_ in pocketpy.h."]},{"l":"Overview","p":["pocketpy works with opaque references. py_Ref is used to reference objects in the virtual machine. It is your responsibility to ensure a reference is valid before using it. See following reference types:","You can store python objects into \"stack\" or \"register\". We provide 8 registers and you can get references to them by py_reg(). Also, py_retval() is a special register that is used to store the return value of a py_CFunction. Registers are shared so they could be overwritten easily. If you want to store python objects across function calls, you should store them into the stack via py_push() and py_pop()."]},{"l":"Data Types","p":["(void*)py_toint()","bool","C to Python","C type","char,short,int,long","const char*","float","float,double","int","py_newbool()","py_newfloat()","py_newint()","py_newstr()","py_tobool()","py_tofloat(), py_castfloat()","py_toint()","py_tostr()","Python to C","Python type","str","void*,intptr_t","You can do conversions between C types and python objects using the following functions:"]},{"l":"PY_RAISE macro","p":["Mark a function that can raise an exception on failure.","If the function returns bool, then false means an exception is raised.","If the function returns int, then -1 means an exception is raised."]},{"l":"PY_RETURN macro","p":["Mark a function that can store a value in py_retval() on success."]}],[{"l":"Functions"},{"l":"py_initialize"},{"l":"py_finalize"},{"l":"py_currentvm"},{"l":"py_switchvm"},{"l":"py_resetvm"},{"l":"py_getvmctx"},{"l":"py_setvmctx"},{"l":"py_interrupt"},{"l":"py_sys_setargv"},{"l":"py_callbacks"},{"i":"py-exec","l":"py_exec"},{"i":"py-eval","l":"py_eval"},{"i":"py-smartexec","l":"py_smartexec"},{"i":"py-smarteval","l":"py_smarteval"},{"i":"py-compile","l":"py_compile"},{"l":"py_newglobals"},{"l":"py_newlocals"},{"l":"py_True"},{"l":"py_False"},{"l":"py_None"},{"l":"py_NIL"},{"l":"py_newint"},{"l":"py_newfloat"},{"l":"py_newbool"},{"l":"py_newstr"},{"l":"py_newstrn"},{"l":"py_newstrv"},{"l":"py_newfstr"},{"l":"py_newnone"},{"l":"py_newnotimplemented"},{"l":"py_newellipsis"},{"l":"py_newnil"},{"l":"py_newtuple"},{"l":"py_newlist"},{"l":"py_newlistn"},{"l":"py_newdict"},{"l":"py_newslice"},{"l":"py_newnativefunc"},{"l":"py_newfunction"},{"l":"py_newboundmethod"},{"l":"py_name"},{"l":"py_namev"},{"l":"py_name2sv"},{"l":"py_newtype"},{"l":"py_newobject"},{"l":"py_toint"},{"l":"py_tofloat"},{"i":"py-castfloat","l":"py_castfloat"},{"i":"py-castfloat32","l":"py_castfloat32"},{"i":"py-castint","l":"py_castint"},{"l":"py_tobool"},{"l":"py_totype"},{"l":"py_tosv"},{"l":"py_bytes_resize"},{"l":"py_touserdata"},{"l":"py_typeof"},{"l":"py_gettype"},{"l":"py_istype"},{"l":"py_isinstance"},{"l":"py_issubclass"},{"l":"py_tpgetmagic"},{"l":"py_tpfindmagic"},{"l":"py_tpfindname"},{"l":"py_tpobject"},{"i":"py-tpcall","l":"py_tpcall"},{"i":"py-checktype","l":"py_checktype"},{"i":"py-checkinstance","l":"py_checkinstance"},{"l":"py_getreg"},{"l":"py_setreg"},{"l":"py_getglobal"},{"l":"py_setglobal"},{"l":"py_getbuiltin"},{"l":"py_assign"},{"l":"py_retval"},{"l":"py_getdict"},{"l":"py_setdict"},{"l":"py_deldict"},{"l":"py_emplacedict"},{"i":"py-applydict","l":"py_applydict"},{"l":"py_getslot"},{"l":"py_setslot"},{"l":"py_inspect_currentfunction"},{"l":"py_inspect_currentmodule"},{"l":"py_bind"},{"l":"py_bindmethod"},{"l":"py_bindstaticmethod"},{"l":"py_bindfunc"},{"l":"py_bindproperty"},{"i":"py-getattr","l":"py_getattr"},{"i":"py-setattr","l":"py_setattr"},{"i":"py-delattr","l":"py_delattr"},{"i":"py-getitem","l":"py_getitem"},{"i":"py-setitem","l":"py_setitem"},{"i":"py-delitem","l":"py_delitem"},{"i":"py-binaryop","l":"py_binaryop"},{"l":"py_peek"},{"l":"py_push"},{"l":"py_pushnil"},{"l":"py_pushnone"},{"l":"py_pushname"},{"l":"py_pop"},{"l":"py_shrink"},{"l":"py_pushtmp"},{"l":"py_pushmethod"},{"i":"py-vectorcall","l":"py_vectorcall"},{"i":"py-pusheval","l":"py_pusheval"},{"l":"py_newmodule"},{"l":"py_getmodule"},{"i":"py-importlib-reload","l":"py_importlib_reload"},{"i":"py-import","l":"py_import"},{"i":"py-exception","l":"py_exception"},{"i":"py-raise","l":"py_raise"},{"l":"py_printexc"},{"l":"py_formatexc"},{"l":"py_checkexc"},{"i":"py-matchexc","l":"py_matchexc"},{"l":"py_clearexc"},{"l":"StopIteration"},{"l":"KeyError"},{"i":"py-bool","l":"py_bool"},{"i":"py-equal","l":"py_equal"},{"i":"py-less","l":"py_less"},{"l":"py_callable"},{"i":"py-hash","l":"py_hash"},{"i":"py-iter","l":"py_iter"},{"i":"py-next","l":"py_next"},{"l":"py_isidentical"},{"i":"py-call","l":"py_call"},{"i":"py-callcfunc","l":"py_callcfunc"},{"i":"py-str","l":"py_str"},{"i":"py-repr","l":"py_repr"},{"i":"py-len","l":"py_len"},{"i":"py-json-dumps","l":"py_json_dumps"},{"i":"py-json-loads","l":"py_json_loads"},{"i":"py-pickle-dumps","l":"py_pickle_dumps"},{"i":"py-pickle-loads","l":"py_pickle_loads"},{"l":"py_tuple_data"},{"l":"py_tuple_getitem"},{"l":"py_tuple_setitem"},{"l":"py_tuple_len"},{"l":"py_list_data"},{"l":"py_list_getitem"},{"l":"py_list_setitem"},{"l":"py_list_delitem"},{"l":"py_list_len"},{"l":"py_list_swap"},{"l":"py_list_append"},{"l":"py_list_emplace"},{"l":"py_list_clear"},{"l":"py_list_insert"},{"i":"py-dict-getitem","l":"py_dict_getitem"},{"i":"py-dict-setitem","l":"py_dict_setitem"},{"i":"py-dict-delitem","l":"py_dict_delitem"},{"i":"py-dict-getitem-by-str","l":"py_dict_getitem_by_str"},{"i":"py-dict-getitem-by-int","l":"py_dict_getitem_by_int"},{"i":"py-dict-setitem-by-str","l":"py_dict_setitem_by_str"},{"i":"py-dict-setitem-by-int","l":"py_dict_setitem_by_int"},{"i":"py-dict-delitem-by-str","l":"py_dict_delitem_by_str"},{"i":"py-dict-delitem-by-int","l":"py_dict_delitem_by_int"},{"i":"py-dict-apply","l":"py_dict_apply"},{"l":"py_dict_len"},{"l":"py_replinput"}],[{"l":"array2d","p":["Efficient general-purpose 2D array."]},{"l":"Source code"}],[{"l":"bisect"},{"i":"bisectbisect_lefta-x","l":"bisect.bisect_left(a, x)","p":["Return the index where to insert item x in list a, assuming a is sorted."]},{"i":"bisectbisect_righta-x","l":"bisect.bisect_right(a, x)","p":["Return the index where to insert item x in list a, assuming a is sorted."]},{"i":"bisectinsort_lefta-x","l":"bisect.insort_left(a, x)","p":["Insert item x in list a, and keep it sorted assuming a is sorted.","If x is already in a, insert it to the left of the leftmost x."]},{"i":"bisectinsort_righta-x","l":"bisect.insort_right(a, x)","p":["Insert item x in list a, and keep it sorted assuming a is sorted.","If x is already in a, insert it to the right of the rightmost x."]},{"l":"Source code"}],[{"l":"cmath","p":["Mathematical functions for complex numbers.","https://docs.python.org/3/library/cmath.html"]},{"l":"Source code"}],[{"l":"collections"},{"i":"collectionscounteriterable","l":"collections.Counter(iterable)","p":["Return a dict containing the counts of each element in iterable."]},{"i":"collectionsdeque","l":"collections.deque","p":["A double-ended queue."]},{"i":"collectionsdefaultdict","l":"collections.defaultdict","p":["A dictionary that returns a default value when a key is not found."]},{"l":"Source code"}],[{"l":"colorcvt","p":["Provide color conversion functions."]},{"l":"Source code"}],[{"l":"dataclasses"},{"i":"dataclassesdataclass","l":"dataclasses.dataclass","p":["A decorator that is used to add special method to classes, including __init__, __repr__ and __eq__."]},{"i":"dataclassesasdictobj---dict","l":"dataclasses.asdict(obj) - dict","p":["Convert a dataclass instance to a dictionary."]},{"l":"Source code"}],[{"l":"datetime"},{"i":"datetimenow","l":"datetime.now()","p":["Returns the current date and time as a datetime object."]},{"i":"datetoday","l":"date.today()","p":["Returns the current local date as a date object."]},{"l":"Source code"}],[{"l":"easing","p":["easing.InBack(t: float) - float","easing.InBounce(t: float) - float","easing.InCirc(t: float) - float","easing.InCubic(t: float) - float","easing.InElastic(t: float) - float","easing.InExpo(t: float) - float","easing.InOutBack(t: float) - float","easing.InOutBounce(t: float) - float","easing.InOutCirc(t: float) - float","easing.InOutCubic(t: float) - float","easing.InOutElastic(t: float) - float","easing.InOutExpo(t: float) - float","easing.InOutQuad(t: float) - float","easing.InOutQuart(t: float) - float","easing.InOutQuint(t: float) - float","easing.InOutSine(t: float) - float","easing.InQuad(t: float) - float","easing.InQuart(t: float) - float","easing.InQuint(t: float) - float","easing.InSine(t: float) - float","easing.Linear(t: float) - float","easing.OutBack(t: float) - float","easing.OutBounce(t: float) - float","easing.OutCirc(t: float) - float","easing.OutCubic(t: float) - float","easing.OutElastic(t: float) - float","easing.OutExpo(t: float) - float","easing.OutQuad(t: float) - float","easing.OutQuart(t: float) - float","easing.OutQuint(t: float) - float","easing.OutSine(t: float) - float","Python wrapper for easing functions."]}],[{"l":"enum"},{"i":"enumenum","l":"enum.Enum","p":["Base class for creating enumerated constants.","Example:"]}],[{"l":"functools"},{"i":"functoolscache","l":"functools.cache","p":["A decorator that caches a function's return value each time it is called. If called later with the same arguments, the cached value is returned, and not re-evaluated."]},{"i":"functoolsreducefunction-sequence-initial","l":"functools.reduce(function, sequence, initial=...)","p":["Apply a function of two arguments cumulatively to the items of a sequence, from left to right, so as to reduce the sequence to a single value. For example, functools.reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and the right argument, y, is the update value from the sequence. If the optional initial is present, it is placed before the items of the sequence in the calculation, and serves as a default when the sequence is empty."]},{"i":"functoolspartialf-args-kwargs","l":"functools.partial(f, *args, **kwargs)","p":["Return a new partial object which when called will behave like f called with the positional arguments args and keyword arguments kwargs. If more arguments are supplied to the call, they are appended to args. If additional keyword arguments are supplied, they extend and override kwargs."]},{"l":"Source code"}],[{"l":"gc"},{"i":"gccollect","l":"gc.collect()","p":["Invoke the garbage collector."]},{"i":"gcenable","l":"gc.enable()","p":["Enable automatic garbage collection."]},{"i":"gcdisable","l":"gc.disable()","p":["Disable automatic garbage collection."]},{"i":"gcisenabled","l":"gc.isenabled()","p":["Return True if automatic garbage collection is enabled, False otherwise."]}],[{"l":"heapq"},{"i":"heapqheappushheap-item","l":"heapq.heappush(heap, item)","p":["Push the value item onto the heap, maintaining the heap invariant."]},{"i":"heapqheappopheap","l":"heapq.heappop(heap)","p":["Pop and return the smallest item from the heap, maintaining the heap invariant. If the heap is empty, IndexError is raised. To access the smallest item without popping it, use heap[0]."]},{"i":"heapqheapifyx","l":"heapq.heapify(x)","p":["Transform list x into a heap, in-place, in linear time."]},{"i":"heapqheappushpopheap-item","l":"heapq.heappushpop(heap, item)","p":["Push item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than heappush() followed by a separate heappop()."]},{"i":"heapqheapreplaceheap-item","l":"heapq.heapreplace(heap, item)","p":["Pop and return the smallest item from the heap, and also push the new item. The heap size doesn’t change. If the heap is empty, IndexError is raised."]},{"l":"Source code"}],[{"l":"importlib"},{"i":"importlibreloadmodule","l":"importlib.reload(module)","p":["Reload a previously imported module. The argument must be a module object, so it must have been successfully imported before. This is useful if you have edited the module source file using an external editor and want to try out the new version without leaving the Python interpreter. The return value is the module object (the same as the argument)."]}],[{"l":"json"},{"i":"jsonloadsdata-str","l":"json.loads(data: str)","p":["Decode a JSON string into a python object."]},{"i":"jsondumpsobj---str","l":"json.dumps(obj) - str","p":["Encode a python object into a JSON string."]}],[{"l":"libhv","p":["This module is optional. Set option PK_BUILD_MODULE_LIBHV to ON in your CMakeLists.txt to enable it.","libhv is a git submodule located at 3rd/libhv/libhv. If you cannot find it, please run the following command to initialize the submodule:","Simple bindings for libhv, which provides cross platform implementation of the following:","HTTP server","HTTP client","WebSocket server","WebSocket client"]},{"l":"Source code"}],[{"l":"linalg","p":["Provide mat3x3, vec2, vec3, vec2i and vec3i types.","This classes adopt torch's naming convention. Methods with _ suffix will modify the instance itself."]},{"l":"Source code"}],[{"l":"lz4","p":["This module is optional. Set option PK_BUILD_MODULE_LZ4 to ON in your CMakeLists.txt to enable it.","LZ4 compression and decompression."]},{"l":"Source code"}],[{"l":"math"},{"i":"mathpi","l":"math.pi","p":["3.141592653589793"]},{"i":"mathe","l":"math.e","p":["2.718281828459045"]},{"i":"mathinf","l":"math.inf","p":["The inf."]},{"i":"mathnan","l":"math.nan","p":["The nan."]},{"i":"mathceilx","l":"math.ceil(x)","p":["Return the ceiling of x as a float, the smallest integer value greater than or equal to x."]},{"i":"mathfabsx","l":"math.fabs(x)","p":["Return the absolute value of x."]},{"i":"mathfloorx","l":"math.floor(x)","p":["Return the floor of x as a float, the largest integer value less than or equal to x."]},{"i":"mathfsumiterable","l":"math.fsum(iterable)","p":["Return an accurate floating point sum of values in the iterable. Avoids loss of precision by tracking multiple intermediate partial sums:"]},{"i":"mathgcda-b","l":"math.gcd(a, b)","p":["Return the greatest common divisor of the integers a and b."]},{"i":"mathisfinitex","l":"math.isfinite(x)","p":["Return True if x is neither an infinity nor a NaN, and False otherwise."]},{"i":"mathisinfx","l":"math.isinf(x)","p":["Return True if x is a positive or negative infinity, and False otherwise."]},{"i":"mathisnanx","l":"math.isnan(x)","p":["Return True if x is a NaN (not a number), and False otherwise."]},{"i":"mathisclosea-b","l":"math.isclose(a, b)","p":["Return True if the values a and b are close to each other and False otherwise."]},{"i":"mathexpx","l":"math.exp(x)","p":["Return e raised to the power of x."]},{"i":"mathlogx","l":"math.log(x)","p":["Return the natural logarithm of x(to base e)."]},{"i":"mathlog2x","l":"math.log2(x)","p":["Return the base-2 logarithm of x. This is usually more accurate than log(x, 2)."]},{"i":"mathlog10x","l":"math.log10(x)","p":["Return the base-10 logarithm of x. This is usually more accurate than log(x, 10)."]},{"i":"mathpowx-y","l":"math.pow(x, y)","p":["Return x raised to the power y."]},{"i":"mathsqrtx","l":"math.sqrt(x)","p":["Return the square root of x."]},{"i":"mathacosx","l":"math.acos(x)","p":["Return the arc cosine of x, in radians."]},{"i":"mathasinx","l":"math.asin(x)","p":["Return the arc sine of x, in radians."]},{"i":"mathatanx","l":"math.atan(x)","p":["Return the arc tangent of x, in radians."]},{"i":"mathatan2y-x","l":"math.atan2(y, x)","p":["Return atan(y / x), in radians. The result is between -pi and pi. The vector in the plane from the origin to point (x, y) makes this angle with the positive X axis. The point of atan2() is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, atan(1) and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4."]},{"i":"mathcosx","l":"math.cos(x)","p":["Return the cosine of x radians."]},{"i":"mathsinx","l":"math.sin(x)","p":["Return the sine of x radians."]},{"i":"mathtanx","l":"math.tan(x)","p":["Return the tangent of x radians."]},{"i":"mathdegreesx","l":"math.degrees(x)","p":["Convert angle x from radians to degrees."]},{"i":"mathradiansx","l":"math.radians(x)","p":["Convert angle x from degrees to radians."]},{"i":"mathmodfx","l":"math.modf(x)","p":["Return the fractional and integer parts of x. Both results carry the sign of x and are floats."]},{"i":"mathfactorialx","l":"math.factorial(x)","p":["Return x factorial as an integer."]}],[{"l":"operator","p":["The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python. For example, operator.add(x, y) is equivalent to the expression x+y. Many function names are those used for special methods, without the double underscores."]},{"l":"Mapping Operators to Functions","p":["-a","~a","a - b","a != b","a @ b","a * b","a ** b","a / b","a // b","a % b","a ^ b","a + b","a = b","a == b","a | b","a b","a is b","a is not b","a[b]","a[b] = c","add(a, b)","Addition","and_(a, b)","b in a","Bitwise AND","Bitwise Inversion","Bitwise OR","Bitwise XOR","bool(a)","Containment Test","contains(a, b)","del a[b]","delitem(a, b)","Division","eq(a, b)","Equality","Exponentiation","floordiv(a, b)","Function","ge(a, b)","getitem(a, b)","gt(a, b)","Identity","Index Assignment","Index Deletion","Indexing","invert(a)","is_(a, b)","is_not(a, b)","le(a, b)","Left Shift","lshift(a, b)","lt(a, b)","matmul(a, b)","Matrix Multiplication","mod(a, b)","Modulo","mul(a, b)","Multiplication","ne(a, b)","neg(a)","Negation (Arithmetic)","Negation (Logical)","not a","not_(a)","Operation","or_(a, b)","Ordering","pow(a, b)","Right Shift","rshift(a, b)","setitem(a, b, c)","sub(a, b)","Subtraction","Syntax","truediv(a, b)","Truth Test","truth(a)","xor(a, b)"]},{"l":"In-place Operators","p":["a -= b","a *= b","a //= b","a /= b","a %= b","a ^= b","a += b","a = b","a |= b","Addition","Bitwise AND","Bitwise OR","Bitwise XOR","Division","Function","iadd(a, b)","iand(a, b)","ifloordiv(a, b)","ilshift(a, b)","imod(a, b)","imul(a, b)","ior(a, b)","irshift(a, b)","isub(a, b)","itruediv(a, b)","ixor(a, b)","Left Shift","Modulo","Multiplication","Operation","Right Shift","Subtraction","Syntax"]}],[{"l":"pickle"},{"i":"pickledumpsobj---bytes","l":"pickle.dumps(obj) - bytes","p":["Return the pickled representation of an object as a bytes object."]},{"i":"pickleloadsb-bytes","l":"pickle.loads(b: bytes)","p":["Return the unpickled object from a bytes object."]},{"i":"what-can-be-pickled-and-unpickled","l":"What can be pickled and unpickled?","p":["The following types can be pickled:","None, True, and False;","integers, floating-point numbers;","strings, bytes;","tuples, lists, sets, and dictionaries containing only picklable objects;","functions (built-in and user-defined) accessible from the top level of a module (using def, not lambda);","classes accessible from the top level of a module;","instances of such classes","The following magic methods are available:","__getnewargs__","__getstate__","__setstate__","__reduce__"]}],[{"l":"random"},{"i":"randomseeda","l":"random.seed(a)","p":["Set the random seed."]},{"i":"randomrandom","l":"random.random()","p":["Return a random float number in the range [0.0, 1.0)."]},{"i":"randomrandinta-b","l":"random.randint(a, b)","p":["Return a random integer in the range [a, b]."]},{"i":"randomuniforma-b","l":"random.uniform(a, b)","p":["Return a random float number in the range [a, b)."]},{"i":"randomchoiceseq","l":"random.choice(seq)","p":["Return a random element from a sequence."]},{"i":"randomshuffleseq","l":"random.shuffle(seq)","p":["Shuffle a sequence inplace."]},{"i":"randomchoicespopulation-weightsnone-k1","l":"random.choices(population, weights=None, k=1)","p":["Return a k sized list of elements chosen from the population with replacement."]}],[{"l":"sys"},{"i":"sysversion","l":"sys.version","p":["The version of pkpy."]},{"i":"sysplatform","l":"sys.platform","p":["May be one of:","win32","linux","darwin","android","ios","emscripten"]},{"i":"sysargv","l":"sys.argv","p":["The command line arguments. Set by py_sys_setargv."]}],[{"l":"time"},{"i":"timetime","l":"time.time()","p":["Returns the current time in seconds since the epoch as a floating point number."]},{"i":"timesleepsecs","l":"time.sleep(secs)","p":["Suspend execution of the calling thread for the given number of seconds."]},{"i":"timelocaltime","l":"time.localtime()","p":["Returns the current struct time as a struct_time object."]}],[{"l":"traceback"},{"i":"tracebackprint_exc---none","l":"traceback.print_exc() - None","p":["Print the last exception and its traceback."]},{"i":"tracebackformat_exc---str","l":"traceback.format_exc() - str","p":["Return the last exception and its traceback as a string."]}],[{"l":"typing","p":["Placeholder module for type hints."]},{"l":"Source code"}],[{"l":"Application Guide","p":["Before starting, please read the Ideas page and choose a project you are interested in. Set up a C11 compiler, clone pocketpy sources from github and try to build. This helps you confirm that your skills and experience match the requirements of the project."]},{"l":"Build guide for beginners","p":["First, you need to install these tools:","Python(>= 3.8), I am sure you already have it.","A C11 compiler, such as GCC, Clang or MSVC. If you are on Linux, gcc is already installed. If you are on Windows, you can install Visual Studio with C/C++ development tools.","CMake(>= 3.10), a cross-platform build tool. You can use pip install cmake to install it.","Then, clone pocketpy sources from github and try to build:","If everything goes well, you will get a main executable ( main.exe on Windows) in the root directory of pocketpy. Simply run it and you will enter pocketpy's REPL."]},{"l":"Application guide","p":["Your need to send an email to blueloveth@foxmail.com with the following information:","A brief introduction about yourself, including the most related open sourced project you have worked on before. It is highly recommended to attach your Github profile link.","A technical proposal for the project you are interested in working on, including:","Your understanding of the project.","The technical approach/architecture you will adopt.","The challenges you might face and how you will overcome them.","A timeline for the project, including the milestones and deliverables.","Other information required by the Google Summer of Code program."]},{"l":"Coding style guide","p":["See Coding Style Guide."]},{"l":"Contact us","p":["If you have any questions, you can join our Discord or contact me via email. We are glad to help you with your application."]}],[{"l":"Project Ideas"},{"l":"VSCode plugin for debugging pocketpy applications","p":["Difficulty Level: 3/5 (Medium)","Skill: TypeScript; C","Project Length: Small","Community users have reported that there is no convenient way to debug python applications interpreted by pocketpy. Fortunately, VSCode provides a mechanism of Debugger Extension that allows us to integrate pocketpy debugger into VSCode UI through Debug Adapter Protocol (DAP).","This project aims to develop a VSCode plugin like Python Debugger, which implements DAP for pocketpy. With this plugin, users can launch their pocketpy applications in VSCode with breakpoints, call stacks, and variable inspection. Students with experience in TypeScript will be helpful for this project."]},{"l":"Develop cTensor library for neural networks","p":["Difficulty Level: 4/5 (Hard)","Skill: C; Further Mathematics","Project Length: Medium","pocketpy is planning to provide a tensor library cTensor for users who want to integrate neural networks into their applications. cTensor implements automatic differentiation and dynamic compute graph. It allows users to train and deploy neural networks on client-side devices like mobile phones and microcontrollers (e.g. ESP32-C3). We have a early prototype located at pocketpy/cTensor.","In this project, students will help develop and test the cTensor library, which is written in C11. We expect students to have a good understanding of further mathematics and C programming."]}],[{"l":"Application Guide","p":["Before starting, please read the Ideas page and choose a project you are interested in. Set up a C++ compiler, clone pocketpy sources from github and try to build. This helps you confirm that your skills and experience match the requirements of the project."]},{"l":"Build guide for beginners","p":["First, you need to install these tools:","Python(>= 3.8), I am sure you already have it.","A C++ compiler, such as GCC, Clang or MSVC. If you are on Linux, gcc and g++ are already installed. If you are on Windows, you can install Visual Studio with C++ development tools.","CMake(>= 3.10), a cross-platform build tool. You can use pip install cmake to install it.","Then, clone pocketpy sources from github and try to build:","If everything goes well, you will get a main executable ( main.exe on Windows) in the root directory of pocketpy. Simply run it and you will enter pocketpy's REPL."]},{"l":"Application guide","p":["Your need to send an email to blueloveth@foxmail.com with the following information:","A brief introduction about yourself, including the most related open sourced project you have worked on before. It is highly recommended to attach your Github profile link.","A technical proposal for the project you are interested in working on, including:","Your understanding of the project.","The technical approach/architecture you will adopt.","The challenges you might face and how you will overcome them.","A timeline for the project, including the milestones and deliverables.","Other information required by the Google Summer of Code program."]},{"l":"Coding style guide","p":["See Coding Style Guide."]},{"l":"Contact us","p":["If you have any questions, you can join our Discord or contact me via email. We are glad to help you with your application."]}],[{"l":"Project Ideas"},{"l":"Implement pybind11 for bindings","p":["Difficulty Level: 5/5 (Hard)","Skill: Advanced C++ with metaprogramming; Python","Project Length: Medium (175 hours)","https://summerofcode.withgoogle.com/archive/2024/projects/Ji2Mi97o","pocketpy has provided a low-level API for creating bindings. It is fast, lightweight and easy to debug. However, it still requires a lot of boilerplate code to create bindings for complex C++ classes. The community has long expected a high-level API for creating bindings.","pybind11 is the most popular C++ library for creating Python bindings for CPython. A bunch of Python libraries are using it. pybind11 adopts a template metaprogramming approach to automatically generate bindings for C++ classes.","Our goal is to introduce a pybind11 compatible solution to pocketpy as an alternative way to create bindings for functions and classes. You can use C++17 features to implement it, instead of C++ 11 used in pybind11.","See https://github.com/pocketpy/pocketpy/issues/216 for more details."]},{"l":"Add numpy module","p":["Difficulty Level: 4/5 (Intermediate)","Skill: Intermediate C++; Python; Linear Algebra","Project Length: Medium (175 hours)","https://summerofcode.withgoogle.com/archive/2024/projects/sJLuASSP","Though pocketpy is designed for game scripting, some people are using it for scientific computing. It would be nice to have a numpy module in pocketpy.","numpy is a huge project. Our goal is to implement a most commonly used subset of numpy in pocketpy. You can mix C++ and Python code to simplify the overall workloads.","See https://github.com/pocketpy/pocketpy/issues/202 for more details."]}],[{"l":"Performance","p":["Currently, pkpy is as fast as cpython 3.9. Performance results for cpython 3.9 are applicable to for pkpy.","Here is a benchmark result of v1.2.6. Files are located in benchmarks/."]},{"l":"win32 64-bit cpy39"},{"l":"linux 64-bit cpy38"},{"l":"linux 32-bit cpy39","p":["See actions/runs."]},{"l":"Primes benchmarks","p":["0.104s ■□□□□□□□□□□□□□□□","1.2.7","1.576s ■■■■■■■■■□□□□□□□","2.385s ■■■■■■■■■■■■■□□□","2.871s ■■■■■■■■■■■■■■■■","3.8.10","5.3.3","benchmarks/primes.cpp","benchmarks/primes.lua","benchmarks/primes.py","c++","cpython","file","gnu++ 11","lua","name","pkpy","These are the results of the primes benchmark on Intel i5-12400F, WSL (Ubuntu 20.04 LTS).","time","version"]}],[{"l":"License","p":["pkpy is licensed under the MIT License."]}]]